swagger: "2.0"
info:
  title: Express-on Test API's
  version: 1.0.0
basePath: /api
consumes:
  - application/json
  - application/xml
  - text/csv
  - text/tsv
produces:
  - application/json
  - application/xml
  - text/plain
  - text/yaml
  - text/csv
  - text/tsv
tags:
  - name: vegetables
    description: Everything about vegetables
responses: &responses
  400:
    description: Bad Request
  401:
    description: Unauthorized
  403:
    description: Forbidden
  404:
    description: Not Found
  415:
    description: Unsupported Media Type
  422:
    description: Unprocessable Entity
  500:
    description: Internal Server Error
    schema:
      $ref: "#/definitions/Error"
parameters:
  find:
    name: find
    in: query
    type: object
    description: find all documents that match selector. If not specified, returns all documents
    -x-example:
      field1: equals
      field2:
        $eq: "9999-12-31"
        $ne: not-equal
        $lt: less-than
        $gt: greater-than
        $in: value1,value2
        $nin: not-value1,not-value2
  distinct:
    name: distinct
    in: query
    type: string
    description: a single path name to get a distinct list of it values, example "field1.inner-field2.maybe-array-field3"
  select:
    name: select
    in: query
    type: string
    description: a space delimited list of path names to include or exclude by prefixing with <b>-</b> sign, example "field1 field2 -field3"
  sort:
    name: sort
    in: query
    description: a space delimited list of path names to sort by ascending or descending by prefixing with <b>-</b> sign, example "field1 field2 -field3"
  skip:
    name: skip
    in: query
    type: integer
    description: the number of documents to skip, useful for pagination when combined with limit
  limit:
    name: limit
    in: query
    default: 10
    type: integer
    description: the maximum number of documents to return, <b>be careful</b> when set to 0 as it returns everything!
  count:
    name: count
    in: query
    type: boolean
    description: counts the number of documents when set to <b>true</b>
  asof: &asof
    in: query
    name: asof
    description: close of business (YYYY-MM-DD)
    type: string
    format: date
    pattern: ^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$
  date:
    << : *asof
    in: path
    name: date
    required: true
  id:
    in: path
    name: id
    type: string
    required: true
variables:
  - &vegTypes
    - $ref: "#/definitions/Vegetable"
    - $ref: "#/definitions/Mineral"
    - $ref: "#/definitions/Animal"
paths:
  /vegetables:
    get:
      summary: Get vegetables
      description: All vegetables
      operationId: getVegetables
      tags:
        - vegetables
      parameters:
        - $ref: "#/parameters/count"
        - $ref: "#/parameters/limit"
        - $ref: "#/parameters/skip"
        - $ref: "#/parameters/select"
        - $ref: "#/parameters/sort"
        - $ref: "#/parameters/distinct"
        - $ref: "#/parameters/find"
      responses:
        << : *responses
        200:
          description: OK
          schema:
            type: array
            items:
              anyOf: *vegTypes
            xml:
              name: xml
    post:
      summary: Create vegetables
      description: Create a single or many vegetables
      operationId: createVegetables
      tags:
        - vegetables
      parameters:
        - in: body
          name: vegetables
          description: The vegetables to create
          schema:
            type: array
            items:
              type: object
            xml:
              name: xml
      responses:
        << : *responses
        201:
          description: Created
          schema:
            type: array
            items:
              anyOf: *vegTypes
            xml:
              name: xml
              wrapped: true
    patch:
      summary: Update vegetables
      description: Modify all vegetables matching a certain criteria
      operationId: updateVegetables
      tags:
        - vegetables
      parameters:
        - $ref: "#/parameters/find"
        - in: body
          name: vegetables
          required: true
          description: The vegetable fields to update
          schema:
            type: object
      responses:
        << : *responses
        200:
          description: Updated Count
          schema:
            type: integer
    put:
      summary: Replace vegetables
      description: Replace a single or many vegetables
      operationId: replaceVegetables
      tags:
        - vegetables
      parameters:
        - in: body
          name: vegetables
          description: The vegetables to replace
          schema:
            type: array
            items:
              type: object
            xml:
              name: xml
      responses:
        << : *responses
        200:
          description: Replaced count
          schema:
            type: integer
    delete:
      summary: Remove vegetables
      description: Remove existing vegetables that matches certain criteria
      operationId: removeVegetables
      tags:
        - vegetables
      parameters:
        - $ref: "#/parameters/find"
      responses:
        << : *responses
        200:
          description: Deleted count
          schema:
            type: integer
  /vegetables/{id}:
    get:
      summary: Get vegetable by id
      description: Search for a vegetable by id
      operationId: getVegetable
      tags:
        - vegetables
      parameters:
        - $ref: "#/parameters/id"
        - $ref: "#/parameters/select"
      responses:
        << : *responses
        200:
          description: OK
          schema:
            oneOf: *vegTypes
            xml:
              name: xml
    put:
      summary: Replace vegetable by id
      description: Replaces existing vegetable with a new one
      operationId: replaceVegetable
      tags:
        - vegetables
      parameters:
        - $ref: "#/parameters/id"
        - in: body
          name: vegetable
          description: The vegetable to replace
          schema:
            type: object
            oneOf: *vegTypes
            xml:
              name: xml
      responses:
        << : *responses
        200:
          description: Replaced count
          schema:
            type: integer
    delete:
      summary: Remove vegetable by id
      description: Remove vegetable asset
      operationId: removeVegetable
      tags:
        - vegetables
      parameters:
        - $ref: "#/parameters/id"
      responses:
        << : *responses
        200:
          description: Deleted count
          schema:
            type: integer
definitions: !!definitions
  Vegetable: vegetable
  Mineral: mineral
  Animal: animal
